------------------------------------------------------------------------------------------------------
------- GENERIC EXTERNAL TABLE to INTERNAL TABLE MAPPING ---------------------------------------------
------------------------------------------------------------------------------------------------------
-- CLOUD / LOCAL depending on a constant C_CLOUD_CREDENTIAL full / empty -----------------------------
------------------------------------------------------------------------------------------------------
-- CLOUD access - not tested yet.
------------------------------------------------------------------------------------------------------
-- LOCAL access
-- The table comment defines Oracle DIRECTORY NAME  of an external table input
--          examples: EXT_L0_DIR
-- The table description defines Oracle DIRECTORY PATH  of an external table input
--          examples: /u01/app/oracle/product/19.0.0.0/dbhome_1/rdbms, e:\stage_extract, \\ServerName\ShareName\input
-- The file name has to be EXT_tablename.csv
-- Optional description on a column defines its format, eg. "YYYYMMDD", including quotation.
-- Oracle directory is subject of the mapping design as well.
------------------------------------------------------------------------------------------------------

------------ Comments ---------------------------------------------------------
-- Generic mapping uses non technical table.columns for source and target lists.
-- Audit columns are filled in by standard generic values.
-- Variable columns (mapped) is ignored.
-- Resulting DDL scripts are two:
--     Run the first as the external table owner
--     Run the second as tne mapping owner
-------------------------------------------------------------------------------

------------ Known issues -----------------------------------------------------
-- Cloud external tables aren't tested.
-------------------------------------------------------------------------------
    ** ERROR: Fill in an owner of the mapping! **
 
prompt **************** <SCRIPTING HEADER> *****************
prompt ******** run this part under a mapping owner ********
prompt Script:     ddl-INT_TAB1-MAPPING.sql
prompt Schema:     
prompt Type:       Mapping
prompt Stereotype: File Generic(id:25)
prompt Object:     INT_TAB1
prompt User:       EMPTY
prompt Date:       Aug 10, 2021, 10:52:33 AM   
prompt Template:   map_interface-filetable.35.ftl
prompt **************** </SCRIPTING HEADER> ****************

create or replace package INT_TAB1 as
---------------------------------------------------------
--The package was generated by MDD Adastra Designer.
--Please, do not make any changes straight into the code.
---------------------------------------------------------
------------ Generated from template version: 19 
------------ Stereotype: File Generic(id:25)
------------ Date time: Aug 10, 2021, 10:52:33 AM 
------------ File: dml-INT_tab1.sql 
------------ Description:  
------------ Status: EMPTY
------------ Responsible person: EMPTY 
------------ Responsible analyst: EMPTY
------------ Target table partitioning strategy no_partition

-- Global variables declarations and definitions
     G_PROCESSED_ROWS  integer   :=0; 
     G_ETL_LOG_KEY     integer   :=0;
-- /Global variables declarations and definitions

  procedure MAIN(
     P_CURRENT_DATE     date,
     P_JOB_ID           integer,
     P_EXTENSION        varchar2   :=null
  );
end INT_TAB1;
/
create or replace package body INT_TAB1 as
---------------------------------------------------------
--The package was generated by MDD Adastra Designer.
--Please, do not make any changes straight into the code.
---------------------------------------------------------
procedure MAIN (
    P_CURRENT_DATE date,
    P_JOB_ID       integer,
    P_EXTENSION    varchar2
) is
-- Constant defaults no pl/sql
-- /Constant defaults no pl/sql

  L_TAB_PART_NAME  varchar2(128);
    
  -- Lookup variables    
  -- /Lookup variables 
begin
  -- Constant actual values no pl/sql
  -- /Constant actual values no pl/sql



  -- Logging start
  -- select sys_context( 'userenv', 'current_schema' ) into v_schema from dual;
  G_PROCESSED_ROWS := 0;
  G_ETL_LOG_KEY :=  ETL_LOGGER.LOG_START(
           P_LOG_NAME   => 'INT_TAB1',
           P_CATG       => 'ETL File Generic(id:25)',
           P_SHORT_TXT  => 'TAB1',
           P_CALL_INPUT => '<P_CURRENT_DATE>'|| to_char(P_CURRENT_DATE,'YYYY-MM-DD') || '</P_CURRENT_DATE>' || 
                           '<P_JOB_ID>'      || to_char(P_JOB_ID)                    || '</P_JOB_ID>' || 
                           '<P_EXTENSION>'   || P_EXTENSION                          || '</P_EXTENSION>'
  );
  ETL_LOGGER.LOG_STEP (
       P_ETL_LOG_KEY   => G_ETL_LOG_KEY, 
       P_SHORT_TXT     => 'INT_TAB1 load started.',
       P_LOG_STEP_NAME => 'ETL_START' 
  );
  ETL_LOGGER.LOG_STEP (
       P_ETL_LOG_KEY   => G_ETL_LOG_KEY, 
       P_SHORT_TXT     => '<TABLE>' ||
                          '<SCHEMA>user_system</SCHEMA>' ||
                          '<TABLE_CODE>TAB1</TABLE_CODE>' ||
                          '</TABLE>',
       P_LOG_STEP_NAME => 'TARGET_TABLE' 
  );
  ETL_LOGGER.LOG_STEP (
       P_ETL_LOG_KEY   => G_ETL_LOG_KEY, 
       P_SHORT_TXT     => '<TABLES>' ||
                          '<TABLE><SCHEMA>user_system</SCHEMA><TABLE_CODE>To-do</TABLE_CODE></TABLE>' ||                        
                          '</TABLES>',
       P_LOG_STEP_NAME => 'SOURCE_TABLES' 
  );
  -- /Logging start
   
  -- Souce code log 
  ETL_LOGGER.LOG_PKG_SRC_CODE(
         P_ETL_LOG_KEY   => G_ETL_LOG_KEY,
         P_PACKAGE_OWNER => '',
         P_PACKAGE_NAME  => 'INT_TAB1'
  ); 
  -- /Souce code log

  -- Lookup values
  -- /Lookup values

  -- Log run stats (init)
   ETL_LOGGER.LOG_EXEC_STATS(P_ETL_LOG_KEY =>  G_ETL_LOG_KEY);
  -- /Log run stats (init)

  -- Statistics Level All
  execute immediate 'alter session set statistics_level = ''ALL''';
  -- /Statistics Level All

  -- Partition management
  -- /Partition management

  -- Pre-mapping
  
    
  -- /Pre-mapping

insert  into user_system.TAB1(
      INS_DT,
      UPD_EFF_DT,
      INS_PROC_ID,
      INT_PROCESS_ID,
      UPD_PROC_ID,
      UPD_DT,
      SRC_UPD_DT,
      INT_SNAP_DATE,
    )
select  
      sysdate, --INS_DT
      P_CURRENT_DATE, --UPD_EFF_DT
      substr( to_char(P_JOB_ID) || ':' || to_char(G_ETL_LOG_KEY),1,255), --INS_PROC_ID
      to_char(P_JOB_ID), --INT_PROCESS_ID
      substr( to_char(P_JOB_ID) || ':' || to_char(G_ETL_LOG_KEY),1,255), --UPD_PROC_ID
      sysdate, --UPD_DT
      sysdate, --SRC_UPD_DT
      sysdate, --INT_SNAP_DATE 
from user_system.EXT_TAB1 T$SRC;
  G_PROCESSED_ROWS:= G_PROCESSED_ROWS + sql%rowcount;
  
  COMMIT;

  -- Post-mapping
  

  -- /Post-mapping
  -- Log Stats
  ETL_LOGGER.LOG_SQL_PLAN(   P_ETL_LOG_KEY => G_ETL_LOG_KEY);
  ETL_LOGGER.LOG_EXEC_STATS( P_ETL_LOG_KEY => G_ETL_LOG_KEY);
  -- /Log Stats
 
  -- Log processed rows
  ETL_LOGGER.LOG_STEP (
      P_ETL_LOG_KEY   => G_ETL_LOG_KEY, 
      P_SHORT_TXT     => '<G_PROCESSED_ROWS>' || to_char(G_PROCESSED_ROWS) || '</G_PROCESSED_ROWS>',
      P_LOG_STEP_NAME => 'PROCESSED_ROWS' 
  );
  -- /Log processed rows
  
  -- Statistics Level Typical
  execute immediate 'alter session set statistics_level = ''TYPICAL''';
  -- /Statistics Level Typical
  
  -- Compute statistics
  
  ETL_LOGGER.LOG_STEP (
       P_ETL_LOG_KEY => G_ETL_LOG_KEY, 
       P_SHORT_TXT => 'Statistics collecting.',
       P_LOG_STEP_NAME => 'STATS_START' 
  );
  user_system.ETL_UTIL.compute_table_stats (     
       p_owner_name  => 'user_system',
       p_table_name  => 'TAB1',
       p_partition_name => L_TAB_PART_NAME,
       p_processed_rows => G_PROCESSED_ROWS
  );
  ETL_LOGGER.LOG_STEP (
       P_ETL_LOG_KEY => G_ETL_LOG_KEY, 
       P_SHORT_TXT => 'Statistics collected.',
       P_LOG_STEP_NAME => 'STATS_FINISH' 
  );
  -- /Compute statistics
 
  -- Finish logging  
  ETL_LOGGER.LOG_STEP (
       P_ETL_LOG_KEY   => G_ETL_LOG_KEY, 
       P_SHORT_TXT     => 'INT_TAB1 finished.',
       P_LOG_STEP_NAME => 'ETL_FINISH' 
  );
  ETL_LOGGER.LOG_FINISH (
           P_ETL_LOG_KEY    => G_ETL_LOG_KEY ,
           P_PROCESSED_ROWS => G_PROCESSED_ROWS
  );
  -- /Finish logging 

  -- Exception handling
EXCEPTION WHEN OTHERS THEN
    ETL_LOGGER.LOG_ERROR (
           P_ETL_LOG_KEY => G_ETL_LOG_KEY,
           P_MESSAGE     => SQLERRM || chr(10) || dbms_utility.format_error_backtrace
    );
    ROLLBACK;
    RAISE_APPLICATION_ERROR (-20000, dbms_utility.format_error_stack || chr(10) || dbms_utility.format_error_backtrace);     
  -- /Exception handling  
end;
end INT_TAB1;
/

